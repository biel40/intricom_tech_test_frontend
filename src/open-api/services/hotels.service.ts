/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { hotelControllerCreateHotel } from '../fn/hotels/hotel-controller-create-hotel';
import { HotelControllerCreateHotel$Params } from '../fn/hotels/hotel-controller-create-hotel';
import { hotelControllerGetAllHotels } from '../fn/hotels/hotel-controller-get-all-hotels';
import { HotelControllerGetAllHotels$Params } from '../fn/hotels/hotel-controller-get-all-hotels';
import { hotelControllerUpdateHotel } from '../fn/hotels/hotel-controller-update-hotel';
import { HotelControllerUpdateHotel$Params } from '../fn/hotels/hotel-controller-update-hotel';

@Injectable({ providedIn: 'root' })
export class HotelsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `hotelControllerGetAllHotels()` */
  static readonly HotelControllerGetAllHotelsPath = '/hotels';

  /**
   * Listar todos los registros de hoteles.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hotelControllerGetAllHotels()` instead.
   *
   * This method doesn't expect any request body.
   */
  hotelControllerGetAllHotels$Response(params?: HotelControllerGetAllHotels$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return hotelControllerGetAllHotels(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todos los registros de hoteles.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hotelControllerGetAllHotels$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hotelControllerGetAllHotels(params?: HotelControllerGetAllHotels$Params, context?: HttpContext): Observable<void> {
    return this.hotelControllerGetAllHotels$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `hotelControllerCreateHotel()` */
  static readonly HotelControllerCreateHotelPath = '/hotels';

  /**
   * Crear un nuevo hotel.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hotelControllerCreateHotel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hotelControllerCreateHotel$Response(params: HotelControllerCreateHotel$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return hotelControllerCreateHotel(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un nuevo hotel.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hotelControllerCreateHotel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hotelControllerCreateHotel(params: HotelControllerCreateHotel$Params, context?: HttpContext): Observable<void> {
    return this.hotelControllerCreateHotel$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `hotelControllerUpdateHotel()` */
  static readonly HotelControllerUpdateHotelPath = '/hotels/{id}';

  /**
   * Modificar un hotel ya existente.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hotelControllerUpdateHotel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hotelControllerUpdateHotel$Response(params: HotelControllerUpdateHotel$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return hotelControllerUpdateHotel(this.http, this.rootUrl, params, context);
  }

  /**
   * Modificar un hotel ya existente.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hotelControllerUpdateHotel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hotelControllerUpdateHotel(params: HotelControllerUpdateHotel$Params, context?: HttpContext): Observable<void> {
    return this.hotelControllerUpdateHotel$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

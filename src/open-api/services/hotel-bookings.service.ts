/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { hotelBookingControllerCreateBooking } from '../fn/hotel-bookings/hotel-booking-controller-create-booking';
import { HotelBookingControllerCreateBooking$Params } from '../fn/hotel-bookings/hotel-booking-controller-create-booking';
import { hotelBookingControllerGetAllBookings } from '../fn/hotel-bookings/hotel-booking-controller-get-all-bookings';
import { HotelBookingControllerGetAllBookings$Params } from '../fn/hotel-bookings/hotel-booking-controller-get-all-bookings';
import { hotelBookingControllerUpdateHotelBooking } from '../fn/hotel-bookings/hotel-booking-controller-update-hotel-booking';
import { HotelBookingControllerUpdateHotelBooking$Params } from '../fn/hotel-bookings/hotel-booking-controller-update-hotel-booking';

@Injectable({ providedIn: 'root' })
export class HotelBookingsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `hotelBookingControllerGetAllBookings()` */
  static readonly HotelBookingControllerGetAllBookingsPath = '/hotelBookings';

  /**
   * Listar todos los registros de las reservas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hotelBookingControllerGetAllBookings()` instead.
   *
   * This method doesn't expect any request body.
   */
  hotelBookingControllerGetAllBookings$Response(params?: HotelBookingControllerGetAllBookings$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return hotelBookingControllerGetAllBookings(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todos los registros de las reservas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hotelBookingControllerGetAllBookings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hotelBookingControllerGetAllBookings(params?: HotelBookingControllerGetAllBookings$Params, context?: HttpContext): Observable<void> {
    return this.hotelBookingControllerGetAllBookings$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `hotelBookingControllerCreateBooking()` */
  static readonly HotelBookingControllerCreateBookingPath = '/hotelBookings';

  /**
   * Crear una nueva reserva.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hotelBookingControllerCreateBooking()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hotelBookingControllerCreateBooking$Response(params: HotelBookingControllerCreateBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return hotelBookingControllerCreateBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear una nueva reserva.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hotelBookingControllerCreateBooking$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hotelBookingControllerCreateBooking(params: HotelBookingControllerCreateBooking$Params, context?: HttpContext): Observable<void> {
    return this.hotelBookingControllerCreateBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `hotelBookingControllerUpdateHotelBooking()` */
  static readonly HotelBookingControllerUpdateHotelBookingPath = '/hotelBookings/{id}';

  /**
   * Modificar una reserva ya existente.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hotelBookingControllerUpdateHotelBooking()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hotelBookingControllerUpdateHotelBooking$Response(params: HotelBookingControllerUpdateHotelBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return hotelBookingControllerUpdateHotelBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Modificar una reserva ya existente.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hotelBookingControllerUpdateHotelBooking$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hotelBookingControllerUpdateHotelBooking(params: HotelBookingControllerUpdateHotelBooking$Params, context?: HttpContext): Observable<void> {
    return this.hotelBookingControllerUpdateHotelBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
